module DMA
(
input			wire			HSEL,
input			wire			HCLK,
input			wire			HRESETn,
input			wire			HREADY,
input			wire	[31:0]HADDR,
input			wire	[1:0]	HTRANS,
input			wire			HWRITE,
input			wire	[2:0]	HSIZE,
input			wire	[31:0]HWDATA,
output		wire			HREADYOUT,
output		wire	[31:0]HRDATA,
output		wire			HRESP
);

reg 				we;
reg 	[31:0] 	hwdata_mask;
reg 	[31:0] 	buf_hwaddr;
reg 	[31:0] 	buf_hrdata;

reg				DMA_start_flag;
reg				DMA_stop_flag;
reg 				DMA_iten_flag;
reg	[31:0]	DMA_sourceaddr;
reg	[31:0]	DMA_targetaddr;
reg	[31:0]	DMA_datasize;

assign HRDATA = buf_hrdata;
assign HREADYOUT = 1'b1;
assign HRESP = 1'b0;

always@(posedge HCLK or negedge HRESETn)	begin
	if(!HRESETn)	begin
		we <= 1'b0;
		buf_hwaddr <= 32'h0;
		buf_hrdata <= 32'b0;
	end
	else	begin
		we <= HSEL & HWRITE & HREADY & HTRANS[1];
		if(HSEL & HREADY & HTRANS[1])	begin
			buf_hwaddr <= HADDR;
			casez(HSIZE[1:0])
				2'b1? : hwdata_mask <= 32'hFFFFFFFF;
				2'b01 : hwdata_mask <= (32'h0000FFFF << (16 * HADDR[1]));
				2'b00 : hwdata_mask <= (32'h000000FF << (8 * HADDR[1:0]));
			endcase
		end
		if(we)	begin
			if(buf_hwaddr[7:0] == 8'h00)	begin
				DMA_start_flag <= (HWDATA & hwdata_mask);
			end
		end
//		if(HSEL & !HWRITE & HREADY & HTRANS[1])	begin
//			if(HADDR == 8'h00)	begin
//				buf_hrdata <= {30'h0, HMASTER};
//			end
//		end
	end
end

endmodule
